{"version":3,"sources":["main.js"],"names":["div0","dom","create","console","log","nodes","empty","empty1","attr","test","style","border","class","add","has","fn1","on","off","find","empty2","siblings","e","next","d","previous","each","children","index","div","divList","n"],"mappings":"AAAA,IAAMA,IAAI,GAAGC,GAAG,CAACC,MAAJ,CAAW,oBAAX,CAAb;AACAC,OAAO,CAACC,GAAR,CAAYJ,IAAZ,GAEA;AACA;;AACA,IAAMK,KAAK,GAAGJ,GAAG,CAACK,KAAJ,CAAUC,MAAV,CAAd;AACAJ,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEAJ,GAAG,CAACO,IAAJ,CAASC,IAAT,EAAe,OAAf,EAAwB,YAAxB;AACAN,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACO,IAAJ,CAASC,IAAT,EAAe,OAAf,CAAZ,GAEA;;AACAR,GAAG,CAACS,KAAJ,CAAUD,IAAV,EAAgB;AAAEE,EAAAA,MAAM,EAAE;AAAV,CAAhB;AAEAV,GAAG,CAACW,KAAJ,CAAUC,GAAV,CAAcJ,IAAd,EAAoB,KAApB;AACAN,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACW,KAAJ,CAAUE,GAAV,CAAcL,IAAd,EAAoB,KAApB,CAAZ;;AAEA,IAAIM,GAAG,GAAG,SAANA,GAAM,GAAM;AACdZ,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD,CAFD,EAGA;AACA;AACA;;;AACAH,GAAG,CAACe,EAAJ,CAAOP,IAAP,EAAa,OAAb,EAAsBM,GAAtB;AACAd,GAAG,CAACgB,GAAJ,CAAQR,IAAR,EAAc,OAAd,EAAuBM,GAAvB;AAEAZ,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACiB,IAAJ,CAAS,IAAT,EAAeC,MAAf,CAAZ;AACAhB,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACmB,QAAJ,CAAaC,CAAb,CAAZ;AAEAlB,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACqB,IAAJ,CAASC,CAAT,CAAZ;AACApB,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACuB,QAAJ,CAAaD,CAAb,CAAZ;AAEAtB,GAAG,CAACwB,IAAJ,CAASN,MAAM,CAACO,QAAhB,EAA0B,UAAAL,CAAC,EAAI;AAC7BpB,EAAAA,GAAG,CAACS,KAAJ,CAAUW,CAAV,EAAa,OAAb,EAAsB,MAAtB;AACD,CAFD;AAIAlB,OAAO,CAACC,GAAR,CAAYH,GAAG,CAAC0B,KAAJ,CAAUN,CAAV,CAAZ;AAEA,IAAMO,GAAG,GAAG3B,GAAG,CAACiB,IAAJ,CAAS,YAAT,EAAuB,CAAvB,CAAZ,EAAuC;;AACvCf,OAAO,CAACC,GAAR,CAAYwB,GAAZ;AACA3B,GAAG,CAACS,KAAJ,CAAUkB,GAAV,EAAe,OAAf,EAAwB,OAAxB,GAAkC;;AAElC,IAAMC,OAAO,GAAG5B,GAAG,CAACiB,IAAJ,CAAS,MAAT,CAAhB,EAAkC;;AAClCjB,GAAG,CAACwB,IAAJ,CAASI,OAAT,EAAkB,UAAAC,CAAC;AAAA,SAAI3B,OAAO,CAACC,GAAR,CAAY0B,CAAZ,CAAJ;AAAA,CAAnB,GAAwC","file":"main.1f19ae8e.js","sourceRoot":"..\\src","sourcesContent":["const div0 = dom.create(\"<div>new div</div>\");\r\nconsole.log(div0);\r\n\r\n//dom.wrap(test, div0);\r\n//dom.remove(window.a);\r\nconst nodes = dom.empty(empty1);\r\nconsole.log(nodes);\r\n\r\ndom.attr(test, \"title\", \"xmas alone\");\r\nconsole.log(dom.attr(test, \"title\"));\r\n\r\n//dom.text(test, \"heyheyhey\");\r\ndom.style(test, { border: \"1px solid red\" });\r\n\r\ndom.class.add(test, \"red\");\r\nconsole.log(dom.class.has(test, \"red\"));\r\n\r\nlet fn1 = () => {\r\n  console.log(\"hey click\");\r\n};\r\n// dom.on(test, \"click\", () => {\r\n//   console.log(\"click!\");\r\n// });\r\ndom.on(test, \"click\", fn1);\r\ndom.off(test, \"click\", fn1);\r\n\r\nconsole.log(dom.find(\"#c\", empty2));\r\nconsole.log(dom.siblings(e));\r\n\r\nconsole.log(dom.next(d));\r\nconsole.log(dom.previous(d));\r\n\r\ndom.each(empty2.children, e => {\r\n  dom.style(e, \"color\", \"pink\");\r\n});\r\n\r\nconsole.log(dom.index(e));\r\n\r\nconst div = dom.find(\"#test>.red\")[0]; // 获取对应的元素\r\nconsole.log(div);\r\ndom.style(div, \"color\", \"green\"); // 设置 div.style.color\r\n\r\nconst divList = dom.find(\".red\"); // 获取多个 div.red 元素\r\ndom.each(divList, n => console.log(n)); // 遍历 divList 里的所有元素\r\n"]}